// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace nyt.core.users.client
{
    using Models;
    using nyt.core;
    using nyt.core.users;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TaskServiceAPI.
    /// </summary>
    public static partial class TaskServiceAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Models.Task> ApiTasksGet(this ITaskServiceAPI operations)
            {
                return operations.ApiTasksGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Models.Task>> ApiTasksGetAsync(this ITaskServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTasksGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            public static void ApiTasksPost(this ITaskServiceAPI operations, Models.Task task = default(Models.Task))
            {
                operations.ApiTasksPostAsync(task).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='task'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiTasksPostAsync(this ITaskServiceAPI operations, Models.Task task = default(Models.Task), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTasksPostWithHttpMessagesAsync(task, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Models.Task ApiTasksByIdGet(this ITaskServiceAPI operations, System.Guid id)
            {
                return operations.ApiTasksByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Models.Task> ApiTasksByIdGetAsync(this ITaskServiceAPI operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTasksByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='task'>
            /// </param>
            public static void ApiTasksByIdPut(this ITaskServiceAPI operations, System.Guid id, Models.Task task = default(Models.Task))
            {
                operations.ApiTasksByIdPutAsync(id, task).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='task'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiTasksByIdPutAsync(this ITaskServiceAPI operations, System.Guid id, Models.Task task = default(Models.Task), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTasksByIdPutWithHttpMessagesAsync(id, task, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiTasksByIdDelete(this ITaskServiceAPI operations, System.Guid id)
            {
                operations.ApiTasksByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApiTasksByIdDeleteAsync(this ITaskServiceAPI operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTasksByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
