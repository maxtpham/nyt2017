/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.0.0.0 (NJsonSchema v9.1.11.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as jQuery from 'jquery';

export namespace UserServiceAPI {

export class Client {
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    apiValuesGet() {
        return new Promise<string[] | null>((resolve, reject) => {
            this.apiValuesGetWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private apiValuesGetWithCallbacks(onSuccess?: (result: string[] | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiValuesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiValuesGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiValuesGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiValuesGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiValuesGet(xhr: any): string[] | null | null {
        const status = xhr.status; 

        if (status === 200) {
            const _responseText = xhr.responseText; 
            let result200: string[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return null;
    }

    /**
     * @value (optional) 
     * @return Success
     */
    apiValuesPost(value: string) {
        return new Promise<void>((resolve, reject) => {
            this.apiValuesPostWithCallbacks(value, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private apiValuesPostWithCallbacks(value: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Values";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiValuesPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiValuesPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiValuesPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiValuesPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiValuesPost(xhr: any): void | null {
        const status = xhr.status; 

        if (status === 200) {
            const _responseText = xhr.responseText; 
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    apiValuesByIdGet(id: number) {
        return new Promise<string | null>((resolve, reject) => {
            this.apiValuesByIdGetWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private apiValuesByIdGetWithCallbacks(id: number, onSuccess?: (result: string | null) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiValuesByIdGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiValuesByIdGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiValuesByIdGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiValuesByIdGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiValuesByIdGet(xhr: any): string | null | null {
        const status = xhr.status; 

        if (status === 200) {
            const _responseText = xhr.responseText; 
            let result200: string | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return null;
    }

    /**
     * @value (optional) 
     * @return Success
     */
    apiValuesByIdPut(id: number, value: string) {
        return new Promise<void>((resolve, reject) => {
            this.apiValuesByIdPutWithCallbacks(id, value, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private apiValuesByIdPutWithCallbacks(id: number, value: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "put",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiValuesByIdPutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiValuesByIdPutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiValuesByIdPutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiValuesByIdPut(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiValuesByIdPut(xhr: any): void | null {
        const status = xhr.status; 

        if (status === 200) {
            const _responseText = xhr.responseText; 
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return;
    }

    /**
     * @return Success
     */
    apiValuesByIdDelete(id: number) {
        return new Promise<void>((resolve, reject) => {
            this.apiValuesByIdDeleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private apiValuesByIdDeleteWithCallbacks(id: number, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "delete",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiValuesByIdDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiValuesByIdDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiValuesByIdDeleteWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiValuesByIdDelete(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiValuesByIdDelete(xhr: any): void | null {
        const status = xhr.status; 

        if (status === 200) {
            const _responseText = xhr.responseText; 
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return;
    }
}


export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, null);
}

}